#!/usr/bin/env python3
"""
DESCRIPTION:

SUBSCRIBERS:
"""

from __future__ import division
import rclpy
from rclpy.node import Node
from mini_interfaces.msg import IMUdata, ContactData
from std_msgs.msg import String
# Used for str(Boolean) --> Boolean
from distutils.util import strtobool

import sys

from ament_index_python.packages import get_package_share_directory
sys.path.append(get_package_share_directory('mini_ros2') + '/../')

# for spotmicro stuff
sys.path.append('../')

from spot_real.Control.RPi.lib.Teensy_Interface import TeensyInterface
from spot_real.Control.RPi.lib.imu import IMU


class SensorInterface(Node):
    def __init__(self):

        super().__init__('SensorInterface')
        self.TI = TeensyInterface()
        self.imu_pub = self.create_publisher(IMUdata, 'spot/imu', 10)
        self.cnt_pub = self.create_publisher(ContactData, 'spot/contact', 10)
        self.str_pub = self.create_publisher(String, 'spot/teensydebug', 10)
        print("PUT SPOT ON THE GROUND, CALIBRATING IMU")
        self.imu = IMU()

        # timer callback for move control
        timer_period = 1.0/60.0
        self.timer = self.create_timer(timer_period, self.timer_callback)


    def timer_callback(self):
        # this is called continuously
        self.read_sensors()

    def read_sensors(self):
        """ Reads IMU and Contact Sensor data from Teensy 4.0
            and publishes to respective topics
        """
        while not rclpy.is_shutdown():
            data = self.TI.read_buffer()

            rclpy.logdebug(data)

            imu_dat = IMUdata()
            imu_read = False
            cnt_dat = ContactData()
            cnt_read = False

            msg = data.decode().split(",")
            # REMOVE NEWLINE
            msg[-1] = msg[-1].rstrip('\r\n')

            # IMU
            if msg[0] == "IMUDATA":
                try:
                    imu_msg = [float(x) for x in msg[1:]]
                    # rclpy.loginfo(imu_msg)
                    # IMU
                    imu_dat.roll = imu_msg[0]
                    imu_dat.pitch = imu_msg[1]
                    imu_dat.acc_x = imu_msg[2]
                    imu_dat.acc_y = imu_msg[3]
                    imu_dat.acc_z = imu_msg[4]
                    imu_dat.gyro_x = imu_msg[5]
                    imu_dat.gyro_y = imu_msg[6]
                    imu_dat.gyro_z = imu_msg[7]
                    imu_read = True
                except:
                    self.get_logger().debug("bad imu read")

            # CONTACT
            elif msg[0] == "CONTACT":
                try:
                    cnt_msg = [strtobool(x) for x in msg[1:]]
                    # rclpy.loginfo(cnt_msg)
                    # Contact Sensor
                    cnt_dat.FL = cnt_msg[0]
                    cnt_dat.FR = cnt_msg[1]
                    cnt_dat.BL = cnt_msg[2]
                    cnt_dat.BR = cnt_msg[3]
                    cnt_read = True
                except:
                    self.get_logger().debug("bad contact read")

            # READ IMU
            self.imu.filter_rpy()
            imu_dat.roll = self.imu.true_roll
            imu_dat.pitch = self.imu.true_pitch
            imu_dat.acc_x = self.imu.imu_data[3]
            imu_dat.acc_y = self.imu.imu_data[4]
            imu_dat.acc_z = self.imu.imu_data[5]
            imu_dat.gyro_x = self.imu.imu_data[0]
            imu_dat.gyro_y = self.imu.imu_data[1]
            imu_dat.gyro_z = self.imu.imu_data[2]
            imu_read = True

            if imu_read:
                self.imu_pub.publish(imu_dat)
                # rclpy.logdebug("IMU")
            if cnt_read:
                self.cnt_pub.publish(cnt_dat)
                # rclpy.logdebug("CONTACT")

            string_msg = String()
            string_msg.data = data
            self.str_pub.publish(string_msg)


def main(args = None):
    """ The main() function. """

    rclpy.init(args=args)

    si = SensorInterface()
    rclpy.spin(si)

    si.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()