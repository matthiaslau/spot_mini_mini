#!/usr/bin/env python
"""
DESCRIPTION:

SUBSCRIBERS:
"""

from __future__ import division
import rclpy
from rclpy.node import Node
from mini_interfaces.srv import CalibServo, CalibServoResponse
from mini_interfaces.msg import JointPulse
import numpy as np

import sys

from ament_index_python.packages import get_package_share_directory
sys.path.append(get_package_share_directory('mini_ros2') + '/../')

# for spotmicro stuff
sys.path.append('../')


class ServoCalibrator(Node):
    def __init__(self):
        super().__init__('ServoCalibrator') # was anonymous in ROS1

        self.serv = self.create_service(CalibServo, 'servo_calibrator',
                                  self.calib_service_cb)
        self.jp_pub = self.create_publisher(JointPulse, 'spot/pulse', 10)

        self.get_logger().info("Use The servo_calibrator service (Pulse Width Unit is us (nominal ~500-2500)).")

    def calib_service_cb(self, req, rsp):
        """ Requests a servo to be moved to a certain position

            Args: req
            Returns: response
        """
        try:
            jp_msg = JointPulse()

            jp_msg.servo_num = req.servo_num
            jp_msg.servo_pulse = req.servo_pulse

            self.jp_pub.publish(jp_msg)
            rsp.response = "Servo Command Sent."
        except rclpy.ROSInterruptException:
            rsp.response = "FAILED to send Servo Command"
        return rsp


def main(args = None):
    """ The main() function. """
    rclpy.init(args=args)

    srv_calib = ServoCalibrator()
    rclpy.spin(srv_calib)

    srv_calib.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
